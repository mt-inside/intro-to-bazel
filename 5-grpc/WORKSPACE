load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")


# == GOLANG ==

# Load the rules' repo
http_archive(
    name = "io_bazel_rules_go",
    sha256 = "db2b2d35293f405430f553bc7a865a8749a8ef60c30287e90d2b278c32771afe",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_go/releases/download/v0.22.3/rules_go-v0.22.3.tar.gz",
        "https://github.com/bazelbuild/rules_go/releases/download/v0.22.3/rules_go-v0.22.3.tar.gz",
    ],
)

# From that repo, load these macros
load("@io_bazel_rules_go//go:deps.bzl", "go_rules_dependencies", "go_register_toolchains")

# Dependencies for the toolchain and the rules' code itself
go_rules_dependencies()

# Install a Golang toolchain into the sandbox
go_register_toolchains()


# == BAZEL ==

# Repo
http_archive(
    name = "bazel_gazelle",
    sha256 = "d8c45ee70ec39a57e7a05e5027c32b1576cc7f16d9dd37135b0eddde45cf1b10",
    urls = [
        "https://storage.googleapis.com/bazel-mirror/github.com/bazelbuild/bazel-gazelle/releases/download/v0.20.0/bazel-gazelle-v0.20.0.tar.gz",
        "https://github.com/bazelbuild/bazel-gazelle/releases/download/v0.20.0/bazel-gazelle-v0.20.0.tar.gz",
    ],
)

# From that repo, load these macros
load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies", "go_repository")

# Deps for the gazelle rules
gazelle_dependencies()


# == DOCKER ==

# Load the rules' repo
http_archive(
    name = "io_bazel_rules_docker",
    sha256 = "dc97fccceacd4c6be14e800b2a00693d5e8d07f69ee187babfd04a80a9f8e250",
    strip_prefix = "rules_docker-0.14.1",
    urls = ["https://github.com/bazelbuild/rules_docker/releases/download/v0.14.1/rules_docker-v0.14.1.tar.gz"],
)

# From that repo, load these macros
load("@io_bazel_rules_docker//repositories:repositories.bzl", container_repositories = "repositories")

# And execute
container_repositories()  # ??

# Now golang-specific stuff...
# Load
load("@io_bazel_rules_docker//go:image.bzl", _go_image_repos = "repositories")

# Execute
_go_image_repos()


# == GRPC ==

# Load library code, for fetching repos over git
load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")

# Load the rules' repo
git_repository(
  name = "com_google_protobuf",
  commit = "d0bfd5221182da1a7cc280f3337b5e41a89539cf", # v3.11.4
  remote = "https://github.com/protocolbuffers/protobuf",
  shallow_since = "1581711200 -0800",
)

# From that repo, load these macors
load("@com_google_protobuf//:protobuf_deps.bzl", "protobuf_deps")

# Execute
protobuf_deps()


# == GRPC - golang dependancies ==
# I've manually written these, and put them in this file, to show how "code" and bazel dependencies are treated the same
# Gazelle won't generate these for you, since they're a workspace thing and they interact with the outside world. For example, what versions would it pick?
# What it can do, is let you manage your deps with go get, and then generate these from a go.mod file.

# The go_repository() rule actually comes from the gazelle repo, don't ask

go_repository(
    name = "org_golang_google_grpc",
    importpath = "google.golang.org/grpc",
    sum = "h1:zvIju4sqAGvwKspUQOhwnpcqSbzi7/H6QomNNjTL4sk=",
    version = "v1.27.1",
)

go_repository(
    name = "org_golang_x_crypto",
    importpath = "golang.org/x/crypto",
    sum = "h1:VklqNMn3ovrHsnt90PveolxSbWFaJdECFbxSq0Mqo2M=",
    version = "v0.0.0-20190308221718-c2843e01d9a2",
)

go_repository(
    name = "org_golang_x_net",
    importpath = "golang.org/x/net",
    sum = "h1:CCH4IOTTfewWjGOlSp+zGcjutRKlBEZQ6wTn8ozI/nI=",
    version = "v0.0.0-20200202094626-16171245cfb2",
)

go_repository(
    name = "org_golang_x_sys",
    importpath = "golang.org/x/sys",
    sum = "h1:1BGLXjeY4akVXGgbC9HugT3Jv3hCI0z56oJR5vAMgBU=",
    version = "v0.0.0-20190215142949-d0b11bdaac8a",
)

go_repository(
    name = "org_golang_x_text",
    importpath = "golang.org/x/text",
    sum = "h1:g61tztE5qeGQ89tm6NTjjM9VPIm088od1l6aSorWRWg=",
    version = "v0.3.0",
)
