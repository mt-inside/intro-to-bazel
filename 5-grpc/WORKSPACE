load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")


# == GOLANG ==

# Load the rules' repo
http_archive(
    name = "io_bazel_rules_go",
    sha256 = "685052b498b6ddfe562ca7a97736741d87916fe536623afb7da2824c0211c369",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_go/releases/download/v0.33.0/rules_go-v0.33.0.zip",
        "https://github.com/bazelbuild/rules_go/releases/download/v0.33.0/rules_go-v0.33.0.zip",
    ],
)

# From that repo, load these macros
load("@io_bazel_rules_go//go:deps.bzl", "go_rules_dependencies", "go_register_toolchains")

# Dependencies for the toolchain and the rules' code itself
go_rules_dependencies()

# Install a Golang toolchain into the sandbox
go_register_toolchains(version = "1.18.3")


# == BAZEL ==

# Repo
http_archive(
    name = "bazel_gazelle",
    sha256 = "501deb3d5695ab658e82f6f6f549ba681ea3ca2a5fb7911154b5aa45596183fa",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/bazel-gazelle/releases/download/v0.26.0/bazel-gazelle-v0.26.0.tar.gz",
        "https://github.com/bazelbuild/bazel-gazelle/releases/download/v0.26.0/bazel-gazelle-v0.26.0.tar.gz",
    ],
)

# From that repo, load these macros
load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies", "go_repository")

# Deps for the gazelle rules
gazelle_dependencies()


# == DOCKER ==

# Load the rules' repo
http_archive(
    name = "io_bazel_rules_docker",
    sha256 = "b1e80761a8a8243d03ebca8845e9cc1ba6c82ce7c5179ce2b295cd36f7e394bf",
    urls = [
        "https://github.com/bazelbuild/rules_docker/releases/download/v0.25.0/rules_docker-v0.25.0.tar.gz",
    ],
)

# From that repo, load these macros
load("@io_bazel_rules_docker//repositories:repositories.bzl", container_repositories = "repositories")

# And execute
container_repositories()  # ??

# Now golang-specific stuff...
# Load
load("@io_bazel_rules_docker//go:image.bzl", _go_image_repos = "repositories")

# Execute
_go_image_repos()


# == Protobuf & gRPC ==

# Load the rules' repo
http_archive(
    name = "rules_proto_grpc",
    sha256 = "507e38c8d95c7efa4f3b1c0595a8e8f139c885cb41a76cab7e20e4e67ae87731",
    strip_prefix = "rules_proto_grpc-4.1.1",
    urls = ["https://github.com/rules-proto-grpc/rules_proto_grpc/archive/4.1.1.tar.gz"],
)

# From that repo, load these macors
load("@rules_proto_grpc//:repositories.bzl", "rules_proto_grpc_toolchains", "rules_proto_grpc_repos")
# Execute
rules_proto_grpc_toolchains()
rules_proto_grpc_repos()

# NB grpc has to come first else you get an import loop :(
load("@rules_proto//proto:repositories.bzl", "rules_proto_dependencies", "rules_proto_toolchains")
rules_proto_dependencies()
rules_proto_toolchains()


# == GRPC - golang dependancies ==
# I've manually written these, and put them in this file, to show how "code" and bazel dependencies are treated the same
# Gazelle won't generate these for you, since they're a workspace thing and they interact with the outside world. For example, what versions would it pick?
# What it can do, is let you manage your deps with go get, and then generate these from a go.mod file.

# The go_repository() rule actually comes from the gazelle repo, don't ask

go_repository(
    name = "org_golang_google_grpc",
    importpath = "google.golang.org/grpc",
    sum = "h1:C1QC6KzgSiLyBabDi87BbjaGreoRgGUF5nOyvfrAZ1k=",
    version = "v1.28.1",
)

go_repository(
    name = "org_golang_x_net",
    importpath = "golang.org/x/net",
    sum = "h1:3G+cUijn7XD+S4eJFddp53Pv7+slrESplyjG25HgL+k=",
    version = "v0.0.0-20200324143707-d3edc9973b7e",
)

go_repository(
    name = "org_golang_x_text",
    importpath = "golang.org/x/text",
    sum = "h1:tW2bmiBqwgJj/UpqtC8EpXEZVYOwU0yG4iWbprSVAcs=",
    version = "v0.3.2",
)
